generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERUSER
}

model User {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now())
  name       String
  email      String   @unique
  password   String
  role       Role     @default(USER)
  events     Event[]
  forms      Form[]
}

model Event {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String
  from        DateTime @db.Date
  to          DateTime @db.Date
  userId      String?  @db.Uuid
  User        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Answer {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  questionId String
  Response   Response? @relation(fields: [responseId], references: [id])
  responseId String?   @db.Uuid
}

model Response {
  id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Form    Form?     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId  String?   @db.Uuid
  answers Answer[]
}

model Form {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String
  questions   Question[]
  responses   Response[]
  User        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?    @db.Uuid
}

enum FieldType {
  TEXT
  SELECT
  MULTI_SELECT
}

model Question {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String
  field_type  FieldType
  Form        Form?     @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId      String?   @db.Uuid
}
